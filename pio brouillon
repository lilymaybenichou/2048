# brouillon projet
from tkinter import Frame,Label,CENTER
import random as R



print("\033[0;97m 2")
print("\033[0;96m 4")
print("\033[0;95m 8")
print("\033[0;94m 16")
print("\033[0;93m 32")
print("\033[0;92m 64")
print("\033[0;91m 128")
print("\033[0;90m 256")
print("\033[0;37m 512")
print("\033[0;36m 1024")
print("\033[0;35m 2048")
print("\033[0;34m 4096")
print("\033[0;33m 8192")
print("\033[0;32m 16384")
print("\033[0;31m 32768")
print("\033[0;30m 65536")

# fonction pour commencer le jeu
def start_game():
    mat=[]
    for i in range(4):
        mat.append([0]*4)
    return mat

# fonction pour ajouter une nouvelle case
def add_new_2(mat):
    r=R.randint(0,3)
    c=R.randint(0,3)

    while(mat[r][c]!=0):
        r=R.randint(0,3)
        c=R.randint(0,3)

    mat[r][c]=2 

#fonction pour 
def get_current_state(mat):
    #si le 2048 et present alors la partie n est pas encore termine
    for i in range(4):
        for j in range(4):
            if mat[i][j]==2048:
                return 'WIN'
    #si 0 est present dans le jeu la partie n'est pas fini
    for i in range(4):
        for j in range(4):
            if mat[i][j]==0:
                return 'GAME NOT OVER '
    #  à l’exception de la dernière ligne ou colonne, il existe des valeurs égales adjacentes à
    for i in range(3):
        for j in range(3):
            if mat[i][j]==mat[i+j][j] or mat[i][j]==mat[i][j+1]:
                return 'GAME NOT OVER'
    ## pour les derniere ligne
    for j in range(3):
        if mat[4][j]==mat[4][j+1]:
            return ' GAME NOT OVER'
        
    for i in range(3):
        if mat[i][4]==mat[i+j][4]:
            return "GAME NOT OVER"
    return ' LOST'

def compress(mat):
    new_mat=[]
    changed=False
    for i in range(4):
        new_mat.append([0]*4)
    
    for i in range(4):
        pos=0
        for j in range(4):
            ##print(i,j,pos)
            if mat[i][j]!=0:
                new_mat[i][pos]=mat[i][j]
                if j!=pos:
                    changed=True
                pos=pos+1

    return new_mat,changed

def merge(mat):
    changed=False
    for i in range(4):
        for j in range(3):
            if mat[i][j]==mat[i][j+1]:
                mat[i][j]=mat[i][j]*2 
                mat[i][j+1]=0
                changed=True 
    return mat,changed

def reversed(mat):
    new_mat=[]
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[i][4-j-i])
    return new_mat

def transpose(mat):
    new_mat=[]
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[j][i])
    return new_mat 

def move_left(mat):
    new_mat,change1=compress(mat)
    new_mat,change2=merge(new_mat)
    changed=change1 and change2
    new_mat,temp=compress(new_mat)

    return new_mat,changed

def move_right(mat):
    new_mat=reversed(mat)
    new_mat,change1=compress(mat)
    new_mat,change2=merge(new_mat)
    changed=change1 or change2
    new_mat,temp=compress(new_mat)
    new_mat=reversed(new_mat)

    return new_mat,changed

def move_up(mat):
    new_mat=transpose(mat)
    new_mat,change1=compress(new_mat)
    new_mat,change2=merge(new_mat)
    changed=change1 or change2
    new_mat,temp=compress(new_mat)
    new_mat=transpose(new_mat)
    return new_mat,changed

def move_down(mat):
    new_mat=transpose(mat)
    new_mat=reversed(new_mat)
    new_mat,change1=compress(new_mat)
    new_mat,change2=merge(new_mat)
    changed=change1 or change2
    new_mat,temp=compress(new_mat)
    new_mat=reversed(new_mat)
    new_mat=transpose(new_mat)
    return new_mat,changed 

SIZE=400
GRID_LEN=4
GRID_PADDING=10

BACKGROUND_COLOR_GAME="#92877d"
BACKGROUND_COLOR_CELL_EMPTY='#9e848a'

BACKROUND_COLOR_DICT={ 2:"#eee4da",4:"#ede0c8",8:"#f2b179",
                      16:"#f59563",32:"#f67c5f",64:"#f65e3b",
                      128:"#edcf72",256:"#edcc61",512:"#edc850",
                      1024:"#f9f6f2",2048:"#f9f6f2",4096:"#f9f6f2",
                      8192:"#f9f6f2",16384:"#f9f6f2",32768:"#f59563",
                      65536:"#f67c5f"
                      }
CELL_COLOR_DICT={ 2:"776e65", 4:"#776e65",8:"#f9f6f2",
                 16:"#f9f6f2",32:"#f9f6f2",64:"#f9f6f2",
                 128:"#f9f6f2",256:"#f9f6f2",512:"#f9f6f2",
                 1024:"#f9f6f2",2048:"#f9f6f2",4096:"#f9f6f2",
                 8192:"#f9f6f2",16384:"#f9f6f2",32768:"#f9f6f2",
                 65536:"#f9f6f2"}
FONT=("verdana",40,"bold")

KEY_UP="'w'"
KEY_DOWN="'s'"
KEY_LEFT="'a'"
KEY_RIGHT="'d'"
        













    


